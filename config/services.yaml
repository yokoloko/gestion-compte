# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr
    site_name: Espace membre @ MyLocalCoop
    project_name: My Local Coop
    project_url: https://yourcoop.local/
    project_url_display: yourcoop.local
    main_color: #51CAE9
    local_currency_name: 'monnaie locale'
    #ip of the spot, comma separated if many
    place_local_ip_address: '127.0.0.1,192.168.0.x'
    # Registration
    registration_duration: '1 year'
    helloasso_registration_campaign_url: https://www.helloasso.com/associations/my-local-coop/adhesions/re-adhesion
    helloasso_api_key:
    helloasso_api_password:
    helloasso_api_base_url: https://api.helloasso.com/v3/
    # Shifting configuration
    due_duration_by_cycle: 180
    min_shift_duration: 90
    cycle_duration: '28 days'
    maximum_nb_of_beneficiaries_in_membership: 2
    new_users_start_as_beginner: true
    unlimited_book_duration: false
    # mail user used for transactional
    transactional_mailer_user: 'contact@yourcoop.local'
    transactional_mailer_user_name: 'espace membre'
    registration_period: '15 days ago'
    remainder_warning_delay: '15'
    images_tmp_dir: '%kernel.project_dir%/web/tmp'
    container.autowiring.strict_mode: true
    code_generation_enabled: true

    logging.mattermost.enabled: false
    logging.mattermost.level: 'critical'
    logging.mattermost.url: 'http://mattermost.yourcoop.local'
    logging.mattermost.channel: ~

    logging.swiftmailer.enabled: false
    logging.swiftmailer.level: 'critical'
    logging.swiftmailer.recipient: ~

    super_admin.username: admin

    # The base domain used for mail addresses
    emails.base_domain: yourcoop.local

    # Several email addresses, to be used as an associative array
    emails.contact:
        from_name: 'Contact Localcoop'
        address: contact@yourcoop.local
    emails.member:
        from_name: 'Membres Localcoop'
        address: membres@yourcoop.local
    emails.shift:
        from_name: 'Créneaux Localcoop'
        address: creneaux@yourcoop.local
    emails.formation:
        from_name: 'Formation Localcoop'
        address: formations@yourcoop.local
    emails.admin:
        from_name: 'Admin Localcoop'
        address: admin@yourcoop.local
    emails.noreply:
        from_name: 'Ne pas répondre'
        address: noreply@yourcoop.local

    # Available emails in some mailing forms
    emails.sendable:
        - "%emails.contact%"
        - "%emails.member%"
        - "%emails.shift%"
        - "%emails.formation%"
        - "%emails.admin%"
        - "%emails.noreply%"
    wiki_keys_url: ~

    use_fly_and_fixed: '%use_fly_and_fixed%'
    display_gauge: '%display_gauge%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $localCurrency: '%local_currency_name%'
            $appSecret: 'test'
            $helloAssoApiKey: '%helloasso_api_key%'
            $helloAssoApiBaseUrl: '%helloasso_api_base_url%'
            $helloAssoApiPassword: '%helloasso_api_password%'
            $registrationDuration: '%registration_duration%'
            $shiftEmail: '%emails.shift%'
            $superAdminUsername: '%super_admin.username%'
            $baseDomain: '%emails.base_domain%'
            $memberEmail: "%emails.member%"
            $project_name: "%project_name%"
            $sendableEmails: '%emails.sendable%'
            $useFlyAndFixed: '%use_fly_and_fixed%'


    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Event,Repository,Twig,Validator}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Controller\DefaultController:
        arguments:
            - '%swipe_card_logging%'
    App\Controller\AmbassadorController:
        arguments:
            - "%time_after_which_members_are_late_with_shifts%"

    App\Helper\:
        resource: '../src/Helper'
        tags: ['controller.service_arguments']
    app.twig_extension:
        class: App\Twig\Extension\AppExtension
        arguments: ['@service_container']
        tags:
            - { name: twig.extension }
    app.twig.extensions.mail:
        class: App\Twig\Extension\MailExtension
        tags:
            - { name: twig.extension }
    app.twig.extensions.event:
        class: App\Twig\Extension\EventExtension
        arguments: ['@event_service']
        tags:
            - { name: twig.extension }
    app.twig.extensions.process_update:
        class: App\Twig\Extension\ProcessUpdateExtension
        arguments: ['@service_container']
        tags:
            - { name: twig.extension }
    app.twig.extensions.membership:
        class: App\Twig\Extension\MembershipExtension
        arguments: ['@service_container']
        tags:
            - { name: twig.extension }
    app.form.registration:
        class: App\Form\RegistrationType
        tags:
            - { name: form.type, alias: app_user_registration }
    app.authentication_success_handler:
        class: App\EventListener\AuthenticationSuccessHandler
        tags:
            - { name: kernel.event_listener, event: security.interactive_login, method: onSecurityInteractiveLogin }
    oauth_event_listener:
        class:  App\EventListener\OAuthEventListener
        arguments:
            $entityManager: "@doctrine.orm.entity_manager"
        tags:
            - { name: kernel.event_listener, event: fos_oauth_server.pre_authorization_process, method: onPreAuthorizationProcess }
            - { name: kernel.event_listener, event: fos_oauth_server.post_authorization_process, method: onPostAuthorizationProcess }
    helloasso_event_listener:
        class:  App\EventListener\HelloassoEventListener
        arguments:
            $mailer: "@mailer"
            $entityManager: "@doctrine.orm.entity_manager"
            $container: "@service_container"
            $memberEmail: "%emails.member%"
        tags:
            - { name: kernel.event_listener, event: helloasso.payment_after_save, method: onPaymentAfterSave }
            - { name: kernel.event_listener, event: helloasso.orphan_solve, method: onOrphanSolve }
    commission_leave_or_join_listener:
        class:  App\EventListener\CommissionEventListener
        arguments:
            $entityManager: "@doctrine.orm.entity_manager"
            $logger: "@logger"
            $container: "@service_container"
        tags:
            - { name: kernel.event_listener, event: commission.join, method: onJoin }
            - { name: kernel.event_listener, event: commission.leave, method: onLeave }
    time_log_event_listener:
        class:  App\EventListener\TimeLogEventListener
        arguments:
            $entityManager: "@doctrine.orm.entity_manager"
            $logger: "@logger"
            $container: "@service_container"
        tags:
            - { name: kernel.event_listener, event: shift.booked, method: onShiftBooked }
            - { name: kernel.event_listener, event: shift.dismissed, method: onShiftDismissed }
            - { name: kernel.event_listener, event: shift.freed, method: onShiftFreed }
            - { name: kernel.event_listener, event: shift.deleted, method: onShiftDeleted }
            - { name: kernel.event_listener, event: member.cycle.end, method: onMemberCycleEnd }
    emailing_event_listener:
        class:  App\EventListener\EmailingEventListener
        arguments:
            $mailer: "@mailer"
            $logger: "@logger"
            $container: "@service_container"
            $memberEmail: "%emails.member%"
            $shiftEmail: "%emails.shift%"
            $wikiKeysUrl: "%wiki_keys_url%"
        tags:
            - { name: kernel.event_listener, event: code.new, method: onCodeNew }
            - { name: kernel.event_listener, event: shift.booked, method: onShiftBooked }
            - { name: kernel.event_listener, event: shift.deleted, method: onShiftDeleted }
            - { name: kernel.event_listener, event: shift.dismissed, method: onShiftDismissed }
            - { name: kernel.event_listener, event: member.cycle.start, method: onMemberCycleStart }
            - { name: kernel.event_listener, event: member.cycle.half, method: onMemberCycleHalf }
            - { name: kernel.event_listener, event: member.created, method: onMemberCreated }
            - { name: kernel.event_listener, event: anonymous_beneficiary.created, method: onAnonymousBeneficiaryCreated }
            - { name: kernel.event_listener, event: anonymous_beneficiary.recall, method: onAnonymousBeneficiaryRecall }
            - { name: kernel.event_listener, event: beneficiary.add, method: onBeneficiaryAdd }
            - { name: kernel.event_listener, event: helloasso.registration_success, method: onHelloassoRegistrationSuccess }
            - { name: kernel.event_listener, event: helloasso.too_early, method: onHelloassoTooEarly }

    beneficiary_initialization_subscriber:
        class: App\EventListener\BeneficiaryInitializationSubscriber
        arguments:
            - "@doctrine.orm.entity_manager"
        tags:
            - { name: kernel.event_listener, event: beneficiary.created, method: onBeforePersist }

    validator_anonymous_beneficiary_unique_email:
        class: App\Validator\Constraints\UniqueEmailValidator
        arguments:
            - "@doctrine.orm.entity_manager"

    validator_anonymous_beneficiary_beneficiary_can_host:
        class: App\Validator\Constraints\BeneficiaryCanHostValidator
        arguments:
            $container: "@service_container"
            $maximum_nb_of_beneficiaries_in_membership: "%maximum_nb_of_beneficiaries_in_membership%"

    shift_service:
        class:  App\Service\ShiftService
        public: true
        arguments:
            - "@doctrine.orm.entity_manager"
            - "%due_duration_by_cycle%"
            - "%min_shift_duration%"
            - "%new_users_start_as_beginner%"
            - "%allow_extra_shifts%"
            - "%max_time_in_advance_to_book_extra_shifts%"

    logger.user_processor:
        class: App\Monolog\MonologUserProcessor
        arguments:
            - '@security.token_storage'
        tags:
            - { name: monolog.processor, method: processRecord }

    logging.handler.mattermost:
        class: App\Monolog\ToggleableHandler
        decorates: monolog.handler.mattermost
        arguments:
            - '@logging.handler.mattermost.inner'
            - '%logging.mattermost.enabled%'

    logging.handler.swiftmailer:
        class: App\Monolog\ToggleableHandler
        decorates: monolog.handler.swiftmailer
        arguments:
            - '@logging.handler.swiftmailer.inner'
            - '%logging.swiftmailer.enabled%'

    membership_service:
        class: App\Service\MembershipService
        public: true
        arguments:
            - "@doctrine.orm.entity_manager"
            - "%registration_duration%"

    event_service:
        class: App\Service\EventService
        public: true

    set_password:
        class: App\EventListener\SetFirstPasswordListener
        public: true
        arguments:
            $entity_manager: "@doctrine.orm.entity_manager"
            $router: "@router"
            $token_storage : '@security.token_storage'
        tags:
            #                - { name: kernel.event_listener, event: fos_user.user.created, method: onUserCreated }
            #                - { name: kernel.event_listener, event: fos_user.registration.success, method: onRegistrationSuccess }
            - { name: doctrine.event_listener, event: prePersist }
            - { name: kernel.event_listener, event: kernel.request, method: forcePasswordChange }
            - { name: kernel.event_listener, event: fos_user.user.password_changed, method: onPasswordChanged }
